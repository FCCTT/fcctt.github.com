<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: HOW-TO | Full Circle - lite]]></title>
  <link href="http://FCCTT.github.com/blog/categories/how-to/atom.xml" rel="self"/>
  <link href="http://FCCTT.github.com/"/>
  <updated>2012-05-26T21:51:50+08:00</updated>
  <id>http://FCCTT.github.com/</id>
  <author>
    <name><![CDATA[fcctt.org]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[53期 - 备份策略 - 第1部分]]></title>
    <link href="http://FCCTT.github.com/blog/2012/04/fcm53-backup-strategy-part-1/"/>
    <updated>2012-04-26T20:14:00+08:00</updated>
    <id>http://FCCTT.github.com/blog/2012/04/fcm53-backup-strategy-part-1</id>
    <content type="html"><![CDATA[<p><code>作者: Allan J.Smithie 翻译: 杨佳 校对: 吴云 顾履冰</code></p>

<p>对极客而言，没有什么比丢失数据更坏的事情了，特别是如果他碰巧有积攒了多年的东西。我们身边的一切都冷酷地变得数字化，音乐、照片集、通信；虽然使用起来很方便，但是很容易丢失。</p>

<p>硬盘出错常常让人们觉得很郁闷；跌落、电涌、病毒或者操作失误都会导致数据丢失。这时候我们就需要一个安全网络，一份备份的策略。噢，瞧，我刚好就有一个......</p>

<h3>什么东西需要备份</h3>

<p>不用担心软件。程序的丢失最多只会带来不便，因为程序可以很容易地被替换掉，尤其是开源程序；你也不必为了找许可证或激活码（ License/Activation Keys ）而浪费时间。</p>

<p>但是如果丢失的是数据就真的悲剧了，因为数据才是真正的无价之宝啊。</p>

<h3>那么要备份什么样的数据文件呢？</h3>

<p>照片、文档、电子表格、日历和电子邮件（邮箱或者个人信息）。如果你和我一样，收藏着从1/4英寸磁带中转录出来的音乐库，那么音乐文件也是宝贝啦。</p>

<p>首先，你得知道这些数据存放在什么地方。这就需要一个详细的存储明细表，能够以文件类型（扩展名）在系统中进行搜索。别以为你亲爱的人也会将文件保存在你希望的位置。进行搜索，看各个地方放的都是些什么东西。然后你进行内务处理并归置好它们。对内容进行合理说明并去掉重复的。你需要知道什么是重要的，什么是最新的。然后清空回收站。记得在明细表中将U盘和外置硬盘也包含进来。</p>

<p>你肯定不想备份系统缓存或临时文件、交换文件或者页面文件，因为你几乎提取不出什么有用东西，而且里面基本上都是垃圾。如果缓存中有你需要的东西，拷贝出来放到一个更安全的地方。</p>

<p>你需要知道一些文件的类型（通常用文件扩展名表示，比如.odt, .pdf, .mpeg, .mp3, .mp4）以便更好对备份进行分类。</p>

<p>数据库（.dbf， .db）一般都有另外的方法来备份上锁或者已经打开的文件、记录和索引。想想你那些重要的俱乐部信息、邮件列表，视频索引；如果备份的时候文件处于锁定（或者编辑）状态，你将会无功而返。备份数据的时候最好将正在使用它的程序关掉。</p>

<h3>备份的文件和数据在什么地方？</h3>

<p>本地（内置）磁盘是数据所在的第一个地方，紧接着是外置硬盘，网络（服务器）驱动器、NAS、SAN以及点对点连接的机器。U盘用于存放最新的“sneaker-net”（译注：sneaker-net是一种人为地用物理移动介质如U盘将文件从一台电脑拷贝到另一台上的方式）拷贝文档是非常合适的，外置USB硬盘和火线硬盘也是不错的选择。我将“暂存数据（temporary）”和中间的数据拷贝文件都复制到了其他的一些设备上（译注:即在几个不同的地方存放同一个文件的几份拷贝）。放在手机和PDA（译注：掌上电脑Pesonal Digital Assistant）、iPhone、iPad上或者同步到Blackberry？为你需要备份的不同种类数据和文件做一个清单。</p>

<h3>版本控制</h3>

<p>你的数据是否具有易失性？高优先级或者很重要的信息可能会经常变化。难道你打算对每个版本都进行备份吗？可能因为审计和检查，公司及政府的数据保留政策，或者只为记录平时的工作过程，你会需要几份不同时期的备份，以便在发生错误时能恢复到之前的版本。那么你应该对保留的份数进行规划以达到空间的最大利用率，因此也就需要考虑备份的频率和保留时间。IT管理中对备份、版本控制和保留策略都有详细的说明，感兴趣的话可以找相关资料看看。</p>

<h3>备份目的地</h3>

<p>最安全的存储计划看起来应该像下面这样： •本机磁盘（原始或主备份） •网络存储磁盘（一般或共享备份） 注意在网络计算广泛应用的今天，这种方式很有可能是你的主要备份方案。即使你用了可靠性更高的RAID（冗余磁盘阵列，Redundant Array of Inexpensive Disk），也不要对其完全信任。数据仍然是以电子位元形式存储于磁盘上的。 •离线存储（offline storage）。一般是磁带，但根据需要也可以是任何东西——磁带，磁盘托，微型磁盘，可写磁盘，或者是挂载的逻辑卷。 •远程存储（off-site storage）。可以是物理介质——几块磁盘组成的镜像，数字磁带或者数据DVD。 •远程云存储（Remote cloud storage），也叫做在线备份（on-line backup）。</p>

<p>要避免丢失数据的危险，你应该保证至少在三个不同地方都有备份：本地、远程和云端。
本地备份不包括你正在使用的那份拷贝。为了方便你可以使用一个外置硬盘。将硬盘放在一个安全的地方，远离电脑。仔细考虑并规划本地备份。</p>

<p>最好将备份放到防火的地方。</p>

<p>远程的意思是不要放在家里或者办公室这些有电脑的地方。如果没别的事情，就交替使用两块外置硬盘，并将其中一块放在你母亲的房间里。你可以和最佳拍档使用刚好相反的安排。我听说有些专业人士甚至在用银行的保管箱。</p>

<p>上面的方法只能提供数据的物理持久性，但是请考虑一下隐私和是否需要对数据进行加密保护。如果你的远程备份被偷走了，这些数据落入他人之手会不会对你造成什么伤害？比如说家人的照片？律师朋友的法律文书？想想就后怕了吧，这就是为什么他要对备份进行加密。这已经能构成另外一个完整的话题了。</p>

<h3>在生活中习惯备份</h3>

<p>这个说法的意思是需要一个管理器或者脚本来触发备份程序将你的数据拷贝到与主备份不同的地方。</p>

<h3>将外部备份移至远方</h3>

<p>如果备份可以免遭火灾、洪水、盗窃、地震和自然损耗等意外，它的有效性就有保证了。一旦备份完成，切记将存储设备移至其他地点。不要放在书架上、冰箱上或桌子下面。那不算是有效的备份。这就是在线或者云存储吸引人的原因了。</p>

<p>在线备份和存储目前对大部分电脑用户来说是很有实用价值的，并且现在也有很多家服务商提供这种服务。由于磁盘空间的廉价性，在带宽允许的条件下它就能自动将你的数据备份到云端。最好的云存储服务甚至还有加密功能。</p>

<h3>测试</h3>

<p>最后：从所有资源中恢复一部分来进行备份恢复测试。原因很简单，有备份并不能代表它就是可用的。磁带和DVD的自然损耗，磁盘错误，软件也不是每次都能保证写的完整性。为了以防万一还是测试一下的好。</p>

<p>因为庞大的数据量和恢复所消耗的时间，数据恢复一直都是一件极具挑战的任务。而且程序还要检查备份数据的完整性。如果你从来没有做过完整的恢复，那么就需要建立起同事们所谓的“可信度（degree of confidence）”。进行部分的数据恢复可以在紧急关头给你信心，否则到时候你就只能猜测了。在生活的其他方面要是靠猜的话，说实话，你的信心有多少？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[53期 - Ubuntu的商业&教育用途 - 第2部分]]></title>
    <link href="http://FCCTT.github.com/blog/2012/04/fcm53-bus-and-edu-part-2/"/>
    <updated>2012-04-26T20:13:00+08:00</updated>
    <id>http://FCCTT.github.com/blog/2012/04/fcm53-bus-and-edu-part-2</id>
    <content type="html"><![CDATA[<p><code>作者：Jess Avilés 翻译：刘丹阳 校对：吴云 梁远金</code></p>

<p>从上期杂志起，我开始讨论家庭办公或小型商业环境中运行于Ubuntu系统的软件需求。为提供一个参考起始点，我描述了一个五人公司的虚构环境，存在台式机与笔记本混用的情况，以及部分硬件要求。现在我们已经完成了硬件的部署，接下来就该转到满足我们需求而必备的软件上来了。商业应用将运行在Ubuntu10.04中，因为长期发行版系统具有一个已知的长期支持。为了明确公司的需求，让我们先来评估一下工作流程。这是一个含义宽泛的词，意为“为达到目标而需完成的步骤”。看看本杂志的第二页吧。你会看到LibreOffice、GIMP、Scribus与Creative Commons的标志。LibreOffice是用于管理文章中的文本。GIMP用于照片的缩放与润饰，而Scribus则用于文本、图片、流程以及pdf生成管理。Creative Commons则为所得的作品提供许可。</p>

<p>工作流程可以被非常广义或狭义地定义。我们会广义地定义工作流程如下：</p>

<ol>
<li>针对潜在客户调整公司市场策略。</li>
<li>客户呼叫，传递项目详细信息，同时寻求方案提议（成本估算）。</li>
<li>方案提议经过研究与提炼，然后通过邮件发送出去。</li>
<li>客户接受方案提议。初始文书工作完成。</li>
<li>调研工作展开。收集样品与照片，撰写调查记录与绘图。样品递送至实验室。</li>
<li>评估实验室报告与调查记录，缩放图片，撰写并发送报告给客户。</li>
<li>进行发票开具与收款（自客户与承包商）。</li>
<li>记录归档。</li>
</ol>


<p>从这个工作流程可以看到我们需要如下类型的软件：</p>

<ul>
<li>桌面与基于web的发布功能（工作流程1）</li>
<li>办公效率（工作流程3与6）</li>
<li>邮件与联系人管理（工作流程1、2、3、4、6与7）</li>
<li>会计（工作流程4、5与7）</li>
<li>图片处理、CAD、GIS与扫描（工作流程1、5、6、7与8）</li>
<li>记录管理（工作流程3、4、6、7与8）</li>
</ul>


<p>鉴于所需软件已明晰，首个检索的位置是Ubuntu的软件仓库，然后是网络。软件可以是开源的，然后可能不产生费用，但也可能会是商业软件。记住一个free（你可以随意理解）的选择并非一定存在。如果软件不在资源库中，那么它应该被打包成deb包，并且尽可能少的需要外部依赖。你也可以查看Ubuntu列表中那些<a href="http://webapps.ubuntu.com/partners/certified-software/">已通过认证的软件</a>，以寻找适用的软件。这些说明有助于将所遇到的问题最小化。</p>

<h3>桌面与基于网络的发布功能</h3>

<p>传单、商业卡片、宣传册以及网页均属此范畴。当你会访别人的时候，双方会交换名片。如果你在参加一个工业展或者一个潜在客户的会议，应该随身带上宣传册与传单。所有这些东西都附有联系信息、邮箱地址与网址。</p>

<p>如果你有用过 MS Publisher、Adobe Frame Maker或者Quark Express，你会知道印刷出版物中元素在页面上的准确定位是必须条件。在Ubuntu上，你可以使用 <a href="http://www.scribus.ne">Scribus</a>。Scribus是一个桌面排版软件（DPS）。其准确定位与色彩管理特性使其成为最佳的自由与开源DPS工具之一。Scribus与常规DPS工具一样，均非文本处理器。放松心情去学习Scribus吧。你可以查看FullCircle前八期的杂志，上面有其教程。一旦掌握了使用的窍门儿，你的纸质出版物印出来之后将是你看到过最棒的。</p>

<p>Scribus在创建调研过程中收集数据的表格方面也很有用。如果你想把表格带到专业的打印店去打印，使用Scribus可以直接导出pdf。关于pdf，存在一个问题就是如果你尝试从pdf中提取文本，提取结果可能就不是那么的让人赏心悦目了。所提取的文本字间可能会有空格，并且每一行都是独立的新行。用Writer将一页有几个段落的页面导出为pdf，然后用Scribus进行相同的操作。你就会明白我的意思了。Scribus也是一款创建pdf表单的优秀工具。其主要缺点在于行与行之间的多行框中存在过大的空隙，这使其看起来很难看。还有，它没有让用户保存填入内容后的pdf选项。Scribus同样可以使用矢量图（<a href="http://inkscape.org">Inkscape</a>） 与点阵图 （<a href="http://www.gimp.org">GIMP</a>）。你可以用Inkscape来创建你公司的标志以及各种剪贴画。将标志创建成矢量图有个优势，那就是你可以在不损失分辨率的情况下放大图片。</p>

<!--more-->


<p>基于web的发布是另一回事。 MS Publisher 可以将你的文档转换为网页。完成这样的操作也许没问题，但产生的代码会很可怕，且是为IE黑客们量身定做的。软件仓库里有 <a href="http://bluefish.openoffice.nl/index.html">Bluefish</a> 与 (<a href="http://www.kompozer.net">Kompozer</a>)。两者均为网页编辑工具，但是Bluefish仅适用于手工编程人员。有了这两款软件，你就可以创建html、PHP、javascript或者之中的任意组合。Bluefish的开发很活跃，而Kompozer相对就缓慢了。如果你打算采取这种方式，确保你用上一个严谨的DTD（Document Type Definition ，文件类型定义），同时别再惦记表格排版的事儿了。严谨的DTD html与CSS布局会给你带来最少的头疼事儿，因为你在遵循一个严谨的秘诀——展示是通过CSS进行控制，然后信息通过html标记进行控制。当厌倦了你网站的外观时，你只需修改CSS即可。当需要更新信息时，找到html源文件就可以进行了。在不同的浏览器中，你的网页看起来并非一定会完全一样，即使你用上了黑客技术也无法保证其会一成不变。同样，如果你稍后雇人管理你的网站，那么一个严格的DTD也会易于让不同的人对其进行维护与读码。</p>

<p>也请记住有许多人是通过智能手机访问互联网的，而某些人则会需要打印你的信息。为这两类人分别提供一个界面、打印与移动版CSS规则会是一个好点子。记住每种媒介都是独特的，你无需令其看起来一模一样。打开Firefox浏览器的首选项，然后查看内容标签。“字体&amp;颜色”部分的高级选项会显示出用于网页的字体大小与字体，而网页自身是不会为字体显示提供任何特殊规则的。如果你没有改过设置，字体会显示为serif，大小会显示为16磅。如果你以打印预览形式打开同一个网页，字体可能会过大。一条CSS规则可能会让屏幕字体保持在1em（译注：em，西文排版行长单位），但是会设置其打印字体大小为12磅。一条移动版规则也许就能让字体保持一致，但会默认隐藏所有图片，或者使用备选的小图片。这样，你的网页就可以自动为不同的用户服务，而无需你去做任何特殊的java或者ajax magic处理。</p>

<p>另一个你可以使用的工具是 <a href="http://www.drupal.org">Drupal</a>。Drupal 提供了几个模板，并且会为你处理所有的编码工作。有些托管公司会为其客户提供一个Drupal设置选项。你只需添加你的文本内容到Drupal提供的模板即可。访问 <a href="http://drupal.org/hosting">http://drupal.org/hosting</a> 寻找适合你的托管服务吧。</p>

<h3>办公效率</h3>

<p>这是为大多数人所熟知的软件集合。Ubuntu提供了OpenOffice作为默认的办公效率套件。OpenOffice与MS Office足够类似，所以大部分人只需极少的培训就能适应其使用。使用OpenOffice的好处包括可以打开MS Office文档，拥有一套全功能办公效率应用。你不单拥有了文字处理器、电子表格以及演示软件，通过绘图套件你还拥有了流程图与图表，并且还有Base套件的数据库应用（这个不在Ubuntu默认安装的范围内）。如需完整套件，请打开软件中心，然后下载OpenOffice.org的Office套件，或者只安装OpenOffice.org的Base套件来获得数据库应用。完整安装会带给你某些传统功能与移动设备滤镜。</p>

<p>因为OpenOffice可与MS Office相媲美，所以你对其不应有任何的疑虑。需要记住的一件事是：OpenOffice是用于创建“开放文档格式（odf）”文档的工具，就像微MS Office是创建Office OpenXML文档的工具一样。虽然各自的套件都支持打开对方的文件格式，它们依然最适合处理由自己创建的文件。简而言之，使用ODF作为你默认文件格式就对了。</p>

<p>使用一个免费套件就意味着你得不到一些东西，诸如：模板、剪贴画与语法查错器，但是这些都可以通过下载获取到。最棘手的一个是语法工具。你得去 <a href="http://lingucomponent.openoffice.org/grammar.html">Lingucomponent</a> 的网页寻找能用的工具。After the deadline （http://afterthedeadline.com）在已有的工具中是最棒的，而不足之处在于你需要将其安装到你的服务器上，且要求服务器至少配备4G内存与多个核心。想用就得掏腰包咯。</p>

<p>OpenOffice为用户提供了使用指南，<a href="http://wiki.services.openoffice.org/wiki/Documentation/OOo3_User_Guides">地址</a>。将其下载下来，以供你的员工使用。他们首次使用此办公套件以及进行迁移时遇到的许多难点在指南里都有解释说明。对于Writer而言，应该历遍段落的概念与页面格式，因为这些东西曾经让我吃尽了苦头。学习使用段落、字符以及页面风格，因为这些都相当实用。还是孩提时候，我们就被反复教导要侧重于文本本身，而文字处理器惯成了我们在使用粗体与斜体时的坏习惯。同样的事情还发生在分段过程中，我们习惯于添加一个无内容的空白段落而非使用类似于文本主体的段落样式。</p>

<p>Calc提供了具有数学公式与图表功能的电子表格。当你有一个包含需要与标准值相比较值的表格时，这种条件格式就可以大派用场了。一旦完成设定，符合你要求的数据将会被自动格式化。我将规则格式应用于大于参考标准的值，包括粗体、下划线、斜体或者其中的任意组合。这些数值随后会被绘制成图表以进行评估，例如，观察其随时间或空间改变而变化的趋势。Calc的公式还为统计学、逻辑学、算法以及金融需求提供了广泛的覆盖面。</p>

<p>许多Impress用户会抱怨其缺乏模板，且这类抱怨还在继续着。Impress在完成其工作方面已经做得足够好了。Transitions很不错，而且我发现一点嵌入式媒体播放器比Powerpoint工作得更好。Impress可以自动播放影片，而用Powerpoint就做不到这点。</p>

<p>捆绑的office套件可提供你所需要的东西。不过，还有LibreOffice这么个选择。目前LibreOffice预置于当前版本的Ubuntu，且看起来在下一个LTS版本（12.04）中它会内置。对于LibreOffice，我对所言持保留意见。因为LibreOffice某些特性还无法与OpenOffice相媲美。不过如果你打算用一下，在 <a href="https://wiki.ubuntu.com/LibreOffice">https://wiki.ubuntu.com/LibreOffice</a> 上照着指令安装即可。而由于两者不能并存，你必须要卸载OpenOffice。</p>

<p>Lyx是一个你可以试试的备选文档处理器。作为Latex的前端，Lyx强调的是写作；Latex规则被用于格式化文档。基本文本类很不错，然而习惯于管理每一个空格的人则可能会觉得它们令人沮丧。Lyx摒弃了Latex的一些复杂特性，而那些了解Latex的人则可以创建新文本类以满足他们的需要。Lyx可以输出pdf、html、DVI以及其他的文件。</p>

<p>邮件与联系人管理 Evolution——了解它，爱上它吧。它与MS Outlook或IBM的 Lotus Notes没什么不同。用它可以管理你的电子邮件，联系人还有日历。简单连接到你的地址簿，然后你就可以轻松地进行邮件合并工作了。</p>

<p>会计 这是一个带有挑战的范畴——因为没有多少适用于Linux小型商业环境的免费会计软件包。幸运地是，软件仓库有个Canonical Partner源可以链接到相关软件。Openbravo ERP是一个基于web的应用，付费后你可以用它来管理工程、开具发票以及访问商务智能工具。已认证软件页面也还链向了<a href="http://www.accountz.com">Accountz</a>) 和 <a href="http://www.muli.com.au">Muli</a> 。虽然我对这些软件包没有任何使用经验，但是Ubuntu认为其可以正常使用。而它们能否做成你要求的东西则是另一回事了。</p>

<h3>图片处理、CAD、GIS与扫描</h3>

<p>数字化维护调研过程中拍摄的照片、手工绘图与样品地理定位等所有东西需要使用特殊的软件。让我们开始看看图片处理软件吧。如果你是Ubuntu新手，那么可能不知道GIMP的存在了，因为它不再是默认预置的应用了。到软件中心把它下载下来吧。GIMP常被拿来与PhotoShop做比较，因其与后者同样的强大 。如果你细心地学习其使用，就可以对你的图片做很多处理了。它会是你桌面与web发布应用的工作流程的组成部分。在这个实例中，我们更多地是用它来调整图片大小，因为它给了我们使用物理单位（毫米或英寸）的选项。当图片作为报告组成部分被打印出来的时候，它们只会占用一整块空间，如一个4×6英寸的面积。如果用当下常见的相机进行全分辨率拍照的话，那么大部分情况下你会得到一张大小在30英寸范围内而容量为几兆的图片。如果你要用几张这样的图片来创建一个文档（假如是用Draw），那么生成的文件将会臃肿笨重且打印起来速度缓慢。用GIMP打开图片，然后找到图片（Image）菜单。从那儿选择缩放（Scale）。在对话框中选择分辨率，确保x和y之间的链节（chain link）没被取消掉，如果它不是300，将其改为300。看看尺寸是怎样改变的。现在转到单位选择框并选择英寸。图片通常会被美化——意味着宽度是最大的尺寸。改变尺寸至4英寸，然后高度将随之自动改变。以别名另存此图，然后比较其与源文件的大小。使用这些缩放后的图片会让你拥有一份极佳的打印文档，且文件大小也成为可控的。</p>

<p>Ubuntu默认的扫描应用是Simple Scan，它确实简单。你可以扫描从第三方接收的文档，Simple Scan预置支持A4、A5、A6、信件、法定尺寸以及4×6大小。分辨率被限制为几个选项，保存选项也仅限于pdf、jpg与png格式。虽然我觉得这些设置已经足够了，但是Simple Scan总是扫描得到最大尺寸的图片，然后我不得不单独处理每张图片。在使用文档进纸器时， Simple Scan可以检测到最后的页面然后停止扫描。Simple Scan不支持使用带纸张自动整理功能的文档进纸器进行双面扫描。 Simple Scan同样缺失光学文字识别（OCR，optical character recognition）选项，因为那不属于其目标。</p>

<p>对于OCR和一些更多的高级特性，可以看看 <a href="http://gscan2pdf.sourceforge.net">gscan2pdf</a>。Gscan2pdf是一个不同工具的集合，它使目前的扫描变得更为方便。其功能之一就是通过 <a href="http://unpaper.berlios.de">unpaper</a> 进行页面清洁与页面纠偏。通过使用 <a href="http://www.martoneconsulting.com/sane-scanadf.html">scanadf</a>，gscan2pdf在当一个ADF超出页面后gscan2pdf就会应该检测得到异常。遗憾的是，在我这儿这个特性不起作用了。我用的是HP惠普的Photosmart Premium并且，每次用ADF时我都必须输入打印页数到机器里。要使用OCR，你得先安装一个OCRC引擎。当然我有，因为在我用过的引擎里，有Tesseract （http://code.google.com/p/tesseract-ocr）我才得到了满意的结果。在安装gscan2pdf之前，先安装这个软件并选择你需要的语言版本。我在Uubuntu上使用过的工具没有一个与在Wwindows上用的是相似的工作方式。我将多功能打印机与软件捆绑，可以扫描文件为pdf，且可以通过拉线选择的方式复制文本与插入OCR识别所得的文本。这样只要选择复制文本的行数就可以扫描pdf和插入OCR'd文本。当保存文档为pdf格式时，gscan2pdf会将OCR识别的'd文本放进备注里，里面会有一些琐碎的东西而这会让某些人觉得有点奇怪。我将此视为软件目前状态的一种不足限制。另一个不足限制是复杂的的排版布局分析。Ocropus（http://code.google.com/p/ocropus ）和Cuneiform （http://launchpad.net/cuneiform-linux）是配合gscan2pdf使用的备选OCR与排版分析引擎。你的结果将依随于文档的布局排版方式而改变，还有，这两个工具都只能在命令行下使用。</p>

<p>一旦完成了调研绘图的扫描，你就得要使用CAD程序对其他们进行数字化处理。对于那些只知道AutoCAD的人而言来说，Uubuntu中的应用选择项会让你惊喜。AutoCAD是不免费的，而软件仓库中的最佳选择是QCAD。QCAD分免费版与收费版（www.qcad.org）的。商业版仅需$36.00并且很值得拥有，性价比极高。我用商业版的原因是为了获得pdf的导出功能。商业版除了拥有bug修复外还具有某些新特性。我用QCAD制作设备布局图，工具以及标记有用的东西。它具有一个模型空间而无纸质空间。于我而言，缺少纸质空间是其最主要的不足，但我已经学会习了如何绕过它去干活。它所用的默认文件类型是dxf，而且不支持AutoCAD dwg格式的导出。对我来说这不成问题，但是如果你想要dwg支持，那么看看Bricsys吧，可以从 （http://www.bricsys.com）在那儿获得Bricsys。它在Ubuntu下工作得很好（属于一个Ubuntu软件合作伙伴），比QCAD要复杂得多，所以有个情理之中的价格$400。另一个免费的选择是DraftSight（ http://www.3ds.com/products/draftsight/free-cad-software/）。看起来它有足够好的前景——提供了类似Bricsys的功能。当我在Uubuntu中安装完之后，基本没法运行它。虽然我看到了硬件规格，但是移动鼠标和添加元素的时候，速度都慢得让人痛苦。这让我想起了有一次玩游戏的时候，我的显卡达不到最低要需求时的那种难受的感觉。几天前之后，新版本发布了——所以东西可能会有所改变。我会继续使用QCAD，因为它可以满足我的需求。</p>

<p>地理信息系统软件是工具箱的一个组成部分，被应用于环境科学与其他很多地方。它让我们可以评估许多不同区域之间的地理关系。如果你有一部个Android安卓手机，可以用谷歌纵横（Latitude）或地图（Maps）。如果得到了你当前的位置，你就可以看到你周围都有些什么。你是否想知道一所大学的存在对周边地区学风的影响？可以访问US Census的网页（http://www.census.gov/geo/www/tiger）， 并且下载他们的数据。接着获取几所当地大学的位置信息，并使用GIS工具以观察距离是否发生了改变。这就是地理信息的实际用途。GIS甚至被用于打击犯罪（http://gislounge.com/crime-mapping-gis-goes-mainstream/）。说到我对的GIS需求的话，我用的是QGIS（http://www.qgis.org），这个不在软件仓库中。你将需要按照说明（http://www.qgis.org/wiki/Download#Ubuntu）添加他们的软件仓库。安装它时还要装上GRASS插件。曾经使用过ArcGIS的人会发现QGIS有点儿眼熟。我发现其存在的主要问题与它附带着Coordinate Reference System坐标参考系统有关（一种给出位置占位符信息的本地定位信息系统）。阅读关于此类信息的手册，因为它运行起来与和ArcGIS还是稍有差别的。</p>

<p>在创建轮廓图时，QGIS也能派上用场，无论是根据高海拔还是污染浓度。可按照Scratching Surfaces上的教程去完成这些工作，地址为 <a href="http://www.surfaces.co.il/?p=595">http://www.surfaces.co.il/?p=595</a> 和 <a href="http://www.surfaces.co.il/?p=578">http://www.surfaces.co.il/?p=578</a>。</p>

<h3>记录管理</h3>

<p>有些时候人们会忘记那些所收集或创建而被管理了几年时间的信息。职业健康安全管理局 (OSHA，Occupational Health and Safety Agency)要求雇主在员工离职后的30年里留存其与健康监测相关的特定检测记录（参见29 CFR 1910.1020(d)(1)(i) ）（二校注：CFR美国联邦法规全书）。美国环境保护局（EPA，US Environmental Protection Agency）有一个记录计划（http://www.epa.gov/records/policy/schedule/）用以他们的记录维护。记录（——无论是纸质的、电子的抑或者是其他的媒介的）都耗费着空间、金钱与时间。而这就是记录管理（ http://en.wikipedia.org/wiki/Records_management）。如果回到我们的工作流程中来，就会发现每一步都会产生记录：当提案建议被发送或接受时，作为调研工作组成部分而创建的文档、发票、付款、从第三方接收的文档等等。当将记录打印出来，然后开始装进文件柜的时候，你就得弄清楚哪些东西应该放入。电子档记录开始填充你的硬盘，这就需要你增加更多的硬盘驱动器了。据我了解，有人超过十年没有删过任何商业邮件。而永久性保留记录并无多好的商业意义。你必须要删掉一些。国家档案与文件署（NARA，the National Archive and Records Agency）有一个面向联邦机构的架构，用以开发创建记录管理指导（<a href="http://www.archives.gov/records-mgmt/policy/rm-framework.html">http://www.archives.gov/records-mgmt/policy/rm-framework.html</a>）。这里面甚至有用于可持续格式（<a href="http://www.archives.gov/records-mgmt/initiatives/sustainable-faq.html">http://www.archives.gov/records-mgmt/initiatives/sustainable-faq.html</a>）与 pdf （http://www.archives.gov/records-mgmt/initiatives/pdf-records.html）的指导。国际标准化组织（ISO）还提供出售一个由两大部分组成的标准电子记录管理（<a href="http://www.iso.org/iso/iso_catalogue/catalogue_tc/catalogue_detail.htm?csnumber=31908">http://www.iso.org/iso/iso_catalogue/catalogue_tc/catalogue_detail.htm?csnumber=31908</a>）。这个澳大利亚的网页（<a href="http://www.records-management.com.au/information.shtml?standards-">http://www.records-management.com.au/information.shtml?standards-</a>）上有一个来自全球的记录相关准则与指导的综合列表。</p>

<p>既然现在我已说服扔掉了那些不需要的记录，那我就可以跟你讲有关记录管理软件（RMS）的东西了。RMS如同一个文档网关般工作。你可以使用RMS保存文档到仓库的地下室中，同时确保能在这里面访问文档。RMS会跟踪文档的改变以及谁曾经调出并编辑过文档。它同时还掌管着文件归档工作。Canonical Partners软件仓库中有一个由一家公司提供的名为Nuxeo的软件可供选择。Nuxeo有部分记录管理功能，同时它也提供内容管理特性。想想那些被加到合同里的“条款和条件（Terms and Conditions）”吧。而现在那里有一个供你考虑的自由（或免费）的选择了。</p>

<p>另一款你可以考虑的RMS，而且还是通过DoD 5015.02认证过的，是 <a href="http://www.alfresco.com">Alfresco</a>。它那儿有一个免费的社区版。我们正在寻找一个RMS，这也是我现在正在做的，Alfresco会是竞争者之一。评价它的主要原因在于其可以连接到Documentum（企业内容管理软件中的一个巨头）。我还没用过这款软件，但如果你想尝试一下用它，请注意Linux社区版只适用于64位机。</p>

<p>如你所见，Ubuntu可以提供一个小型环保公司所需的所有工具软件。于公司而言，主要的成本在于购置硬件，配置网络与部署以及购买软件。上面我所提及的大多数软件都是免费的，并且都在软件仓库中，这可以减少一些与软件搜索相关的头痛事情。有了这么棒的免费环境就无需恐惧要花一大笔钱去开家店咯。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[53期 - Libre Office - 第8部分]]></title>
    <link href="http://FCCTT.github.com/blog/2012/04/fcm53-libre-office-part-8/"/>
    <updated>2012-04-26T20:12:00+08:00</updated>
    <id>http://FCCTT.github.com/blog/2012/04/fcm53-libre-office-part-8</id>
    <content type="html"><![CDATA[<p><code>作者: Elmer Perry 翻译: 相晓伟 校对: 吴云 顾履冰</code></p>

<p>Calc是LibreOffice中与微软的Excel兼容的电子表格模块。在上一期的文章中可以看到我们使用Calc建立了一个贫困户统计数据库，但它的功能并不仅限于搜集数据。顾名思义，Calc可以使用许多内置的程序来进行计算。这意味着我们不必手动计算某些列的总和，我们可以插入一个公式来进行累加。在Calc中你还可以做一个“如果......”的假设来处理电子表格中的数字。</p>

<p>在我们创建预算电子表格之前，你需要知道一个文件（在Calc中有时也被称为工作簿）是如何工作的。 每个文件可以包含几个不同的电子表格。 在一个新的工作簿中，你会得到三个默认命名为工作表1，工作表2和工作表3的电子表格。它们位列于窗口底部的标签中。 每个电子表格由单个单元格组成。 通过它们的列字母和行号可以辨别单元格。例如，在左上角的第一个单元格是A1，第一列，第一行。每个电子表格能容纳1024列和1,048,576行。</p>

<p>Calc的窗口布局和Writer的窗口相比有一点点区别。你还有一个菜单栏和格式栏，但在格式栏下面还有公式栏。当使用Calc工作时，公式栏会成为你的朋友。最左边的框是当前选中的单元格的名称框。它会显示你当前选中的单元格或单元格的范围。那三个按钮分别是函数向导，求和按钮和功能按钮。文本框是输入行，用来编辑单元格里的内容。</p>

<p>在电子表格的顶部，可以看到列标题（A，B，C......）和沿着左侧排列的行头（1，2，3......)。表格中的行和列由浅灰色线条标识。当你设计电子表格时就会发现这个表格很方便。</p>

<!--more-->


<p>有几种在单元格中输入数据的方法供你选择。可以点击单元格后直接输入。当输入完成后，按Enter（回车）键，Calc就会移至下面的单元格中。还可以点击一个单元格，在公式栏中的输入行上输入你的数据。这种方法有一个缺点，我会在后面解释，但有时它是编辑单元格内容的最好方法。你也可以通过双击单元格后在其中直接编辑。这样你会进入单元格编辑模式。这种模式和在公式栏中编辑的模式类似。</p>

<p>你可以拿起鼠标点击想要的单元格来在电子表格中浏览数据。然而，既然手已经放在键盘上了，使用键盘快捷键完成这些功能岂不是更好。Tab键让你右移一个单元格。Shift+Tab键左移一个单元格。 Enter（回车）键下移一个单元格，Shift+Enter（回车）键上移一个单元格。当未进入编辑模式或未使用输入行时，方向键可以让单元格高亮框随着箭头方向移动。当处于编辑模式或使用输入行时，方向键浏览将失效，但你可以在内容中移动光标。</p>

<p>现在，掌握了这些工具后，让我们来建立预算电子表格的第一部分。 打开一个新的Calc文件。点击第一行行首上部和列标题左侧的空白灰色区域（译注：即行首和列首交汇的左顶角单元格）。这将选择整个工作表。在格式栏上，将字体设置成好看的sans-serif字体（比如Arial），设置字体大小为12磅。这样我们就为整个工作表设置了默认的字体和大小。</p>

<p>在单元格A1中，输入文字“Income for This Period（本季度收入）”并按下Enter（回车）。现在，先别担心文本会溢出单元格。过会儿我们再来解决它。在A列的第二行中输入“Sources（来源）”。在A列的第3行，输入你收入的不同种类，例如：工资，自由职业收入，奖金。我对那些不适合归入其他类别的收入来源，如彩票中奖和辞掉你的日常工作，通常会添加一个“Misc（杂项，其他项）”。</p>

<p>此时，你填写的收入来源可能溢出了它们所在的单元格。可以点击单元格A和B之间的列头同时拖动（鼠标）来调整列宽。 我们还没有注意到单元格A1。 现在，A1中的内容溢出解决了，只要确保你的所有收入来源和当前列宽合适就行。</p>

<p>移动到单元格B2。输入“Amount（金额）”。按Enter（回车）键。在B列中，输入每种收入来源的金额。你会发现默认的数字都不符合货币的格式。让我们来把它们变得看起来像货币金额吧。下来我们立刻对它改头换面。您可以通过点击鼠标左键并拖动直至所有的数字都高亮来选择所有已被写入数字的单元格。您还可以单击的第一个单元格，按住Shift键，再点击最后一个单元格。或者通过键盘中Shift键和方向键来选中它们。在Format（格式）>Cells（单元格）>Numbers（数字）中选择货币类别。在上述格式框中，选择你所在的国家正确的货币类型。从格式框中选择一种货币格式。这完全由你而定。 由于在收入单元格中不应该出现负数，货币格式已经为此做了限制，所以你不需要太担心出现负数时如何处理数字格式的问题。</p>

<p>现在，我们处理A1中的内容溢出到B1的问题。由于这段文字是本部分的标题，我们希望它在本区域中跨列显示。办法就是合并单元格。高亮显示单元格A1和B1，选择Format（格式）>Merge Cells（合并单元格）>Merge and Center Cells（合并和单元格居中）。以后我们会多次用到合并单元格功能，它应该会成为您最喜爱的格式功能之一。不幸的是，没有键盘快捷键来实现这个功能，不过你可以通过Tools（工具）>Customize（自定义）>Keyboard（键盘）来创建。但请注意你不能为一个常见的或预定义的功能创建键盘快捷键。</p>

<p>现在，我们来让它看起来像一个标题。先设置字体为粗体，通过Format（格式）>Cells（单元格）>Font tab（字体选项卡），在“Typeface（字体）”下选择“Bold（粗体）”。让我们在它周围加上边框，使它稍微显示突出一些。点击“边框”页选项卡，在“Default（默认值）”选项下，单击第二个框，“Set All Four Borders（设置所有四个边框）”。保持默认风格，但把颜色改为灰色。单击“OK（确定）”。</p>

<p>对于Source（来源）和Amount（金额）标题，我们也希望它们突出显示，但需要看起来和本部分的标题有点不同，以便区分。选择内容为“Source”和“Amount” 的两个单元格。 在Format（格式）>Cells（单元格）>Font tab（字体选项卡）中再次选择粗体。点击“Boards tab（边框选项卡）”。这次我们只想在两个单元格之间添加边框。 点击那个在两个含有一个白色X的灰色框之间的用户自定义框。你会看到两者之间有条线，将颜色更改为灰色。在“Alignment tab（对齐选项卡）”中更改对齐方式为水平居中和垂直居中。在“Background tab（背景选项卡）”中选择背景颜色为淡蓝色（蓝8）。单击“OK（确定）”。</p>

<p>对于收入项，我们可以在它们周围添加一个边框，但这有时候会影响可读性。不过，我们可以突出偶数行。从第二项开始高亮显示名称和其金额。在Format（格式）>Cells（单元格）>Background tab（背景选项卡）中选择背景为浅灰色。我选择灰色10％。单击“OK（确定）”。对所有的偶数行重复此操作。</p>

<p>如果将“Name（名称）”和“Amount（金额）” 与整个电子表格中的边框分隔开会很不错。点击第一个“Name（名称）”，按住Shift键，然后单击的最后一个“Amount（金额）”。 这应该会高亮显示所有条目及其金额。在Format（格式）>Cells（单元格）>Border tab（边框选项卡）中的“Default（默认）”选项卡下选择第二个框，“Set Outer Border Only（只设置外边框）”。 你会发现用户自定义框有些不同。那里有四个含有一个白色X的灰色框。 点击顶部两个框中间的地方，这会在单元格之间添加一条垂直线。如果你点击中间区域，它会创建一个垂直线和水平线，这并不是我们想要的。更改颜色为灰色，然后单击“OK（确定）”。</p>

<p>这就完成了我们电子表格中的收入部分。在下期的文章中，我们将在预算电子表格加入Assets（资产）部分。同时也将开始在我们的电子表格中使用Sum函数做一些数学计算。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[53期 - Python 编程 - 第27部分]]></title>
    <link href="http://FCCTT.github.com/blog/2012/04/fcm53-python-programming-part-27/"/>
    <updated>2012-04-26T20:11:00+08:00</updated>
    <id>http://FCCTT.github.com/blog/2012/04/fcm53-python-programming-part-27</id>
    <content type="html"><![CDATA[<p><code>作者：Greg Walters | 翻译：文宁 校对：李蹊 吴云</code></p>

<p>如果你曾经排队买过电影票，或者曾经在交通高峰期等车，又或者曾经拿着写有数字98的小票在政府办公室等待，并且一个标志写着：“正在为42号服务”，那么你就在队列里呆过。</p>

<p>在电脑的世界里，队列是很常见的。作为一个用户，通常你不必考虑它们。对于用户而言它们是不可见的。但是，如果你必须处理实时事件，就得和它们打交道了。它只不过是一些正在排队等待被执行的数据。一旦数据进入队列，直到被访问后才会出队列。除非你让前面的数据项出队，否则就不能获得下一个数据项的值。例如，如果想获得队列里第15项的值，你就必须先访问前14项。一旦某项被访问，它就会出队列。一旦它离开队列，就不能再取回这个数据了，除非你把它保存到一个持久变量中。</p>

<p>队列有很多种。最常见的一些是FIFO (First In, First Out，先进先出), LIFO (Last In, First Out，后进先出), Priority(优先级队列), 以及 Ring(队列环)。关于环型队列的讨论我们将另找时间。</p>

<p>FIFO队列在我们日常生活中很常见。之前我所列举的有关队列的例子都是FIFO队列。队列里的第一个人首先获得处理，接着里面的每个人都向前走一步。在FIFO缓冲区里，项目所持有的号码是没有限制的（在合理范围内）。它们仅仅是按顺序堆在一起。当一个数据项被处理后，它将从这个队列里被推出去（或者叫出队），而它之后的每一个都会往前移动一个位置，使其更加靠近队列的前端。</p>

<p>LIFO队列在生活中就相对不常见了，但是还是有的。最容易想到的是橱柜里的一叠盘子。当盘子被清洗晾干后，它们将被叠放在橱柜里。最后一个放在它们上面的将被第一个用到。其余的都必须等待，也许很多天后才会被用上。这样看来，排队买电影票是FIFO队列的确是件好事儿，对吧？和FIFO队列一样，在合理的范围内，LIFO队列的大小也是没有限制的。队列里的第一项必须等待较新加入的项陆续被推出缓冲区（从堆里取出盘子）直到只剩它一个时方可被调用。</p>

<p>对于许多人来讲，要立刻想到一个Priotiry队列或许有点困难。想象一个公司只有一台打印机，每个人都要用到那台打印机，而打印工作由部门的权限控制。工资单，比如说，相对于你这个程序员有较高的权限（应该庆幸如此）而你相对于接待者有较高的权限（庆幸如此）。因此简单说就是，权限较高的那些数据先于权限较低的被处理，并离开队列。</p>

<h3>FIFO</h3>

<p>与数据有关的FIFO队列是比较容易想象的。一个python链表就是一个容易想到的。考虑一下这个链表......</p>

<pre><code>[1,2,3,4,5,6,7,8,9,10]
</code></pre>

<p>这个列表中有10个元素。在列表中，你可以根据序号访问它们。然而，在队列中却不能根据序号访问这些元素。只能处理最近的一个，而且这个列表不是静态的，它是动态的。当我们请求队列中的下一个元素，当前元素就会被移除。那么用上面的例子，你请求队列中的一个元素。它会返回第一个元素（1）并且队列将变成这样：</p>

<pre><code>[2,3,4,5,6,7,8,9,10]
</code></pre>

<p>再请求两个你将获得2，接着是3，然后返回，接着队列将变成这样：</p>

<pre><code>[4,5,6,7,8,9,10]
</code></pre>

<p>我敢肯定你明白了。Python提供了一个简单的库，令人惊奇的是，就叫Queue。对于中小型的队列(大概可以容纳500个元素)来说，它运行得还是不错的。上面的代码就是一个简单的例子。</p>

<p>在这个例子中，我们初始化了这个队列（fifo = Queue.Queue()），接着把数字0到4放到了队列（fifo.put(i)）中。然后调用内部方法.get()使队中元素出队，直到队列为空（.empty()）。返回的是0,1,2,3,4。你也可以通过初始化队列的大小来设置队列项数目的最大值，就像这样：</p>

<pre><code>fifo = Queue.Queue(300)
</code></pre>

<p>一旦队列中元素的数量达到了最大值，队列会阻止任何对其进行添加的操作。不过，这将产生一个使程序看起来像是被“锁住”了的副作用。为了避免这种情况，最简单的方法就是用Queue.full()函数进行检查（右上图）。在这个例子里，队列的最大容量被设置成了12个元素。我们把'0'到'11'这些数据项放入队列。当我们遇到数字12时，就说明缓冲区已经满了。因为在将这个数据项放进去之前我们已经对缓冲区是否为满进行了检查，所以最后一项就被丢弃了。</p>

<p>当然也有其他的选择，但它们也会有它们的副作用，我们将在今后的文章中说到。因此，大部分时间里，原则上还是使用无限制的队列或保证你队列里的空间多于你所需要的。</p>

<h3>LIFO</h3>

<p>Queue库也支持LIFO队列。我们将用上面的列表作为一个形象的例子。建立一个如下的队列：</p>

<pre><code>[1,2,3,4,5,6,7,8,9,10]
</code></pre>

<p>从这个队列里推出三个数据项，然后它就变成这样：</p>

<pre><code>[1,2,3,4,5,6,7]
</code></pre>

<p>记住，在一个LIFO队列里，数据项按照后进先出的顺序被移除。这里有一个LIFO队列的简单例子： 当我们运行它，将会得到"4,3,2,1,0"。</p>

<p>同FIFO队列一样，你可以设置队列的大小，并且用.full()来检查队列是否已满。</p>

<h3>PRIORITY</h3>

<p>虽然PRIORITY队列不常用，但有时也很有用。它和其他队列在结构上几乎是一样的，但是我们需要传入一个含有优先权（priority）和数据的元组。下面是一个用Queue库的例子：</p>

<p>首先，我们初始化队列。接着将4个数据项放入到这个队列里。注意，用（优先级，数据）这种形式来存放数据。库将把我们的数据按照优先级升序排列。当进行数据出队操作时，一个元组将被推出，（形式）就像我们入队时一样。你可以按照数据索引来寻址。将获得的是......</p>

<p>在前面两个例子，我们只输出了从队列里出来的数据。对于那些例子这就够了，但在实际编程中，你可能需要尽快处理那些出队的数据，否则它们就会丢失。当使用“print fifo.get”时，数据就被送到了终端，然后它就被销毁了。只有我们脑袋还记得有它。</p>

<p>现在来用我们已经学过的关于tkinter的东西创建一个队列演示程序。这个演示程序将有两个窗框。第一个将包含三个按钮（呈现给用户的）。一个是给FIFO队列用的，一个给LIFO队列，还有一个给PRIORITY队列。第二个窗框将包含一个输入控件，两个按钮（一个用来入队列操作，一个用来出队操作），以及三个标签（一个用来显示队空，一个显示队满，一个显示出队元素）。我们也将写一些代码使窗口在屏幕中自动居中。左上图是代码的开头部分。</p>

<p>这是imports部分和类开始的部分。和以前一样，我们用DefineVars, BuildWidgets, 和PlaceWidgets 函数来创建<strong>init</strong>例程。还有一个叫ShowStatus的函数（右上图），嗯，用它来显示队列的状态。</p>

<p>现在开始创建DefineVars函数。我们有四个StringVar()对象，一个叫QueueType的空变量，以及三个队列对象——每一个将要演示的队列类型都需要一个对象。为了便于演示，我们已经设定这个队列的最大容量为10。也创建了一个叫obj的对象，并让它指向FIFO队列。当从按钮里选择一个队列类型时，就把这个对象指向我们需要的那个队列。这样，这个队列在我们切换至到另一个队列类型时也能被保留下来（代码在前一页的右下方）。</p>

<p>现在开始定义控件。创建第一个窗框，三个按钮，以及它们的绑定项。请注意，要用同一个函数来处理绑定回调。每一个按钮在点击时都将传入一个值给回调函数，我们将以此来表示哪个按钮被点击了。也可以简单地给每一个按钮创建一个专用函数。不过，既然三个按钮处理的是一个共同任务，我想让它们作为一个组来工作会更好些（代码在右边）。</p>

<p>接下来（右下方），我们建立第二个窗框，输入控件，以及两个按钮。这里唯一与众不同的是entry控件的绑定项。我们把self.AddToQueue函数绑定到<Return>键（回车键）。这样，用户就不必用鼠标来添加数据了。只需在输入控件里输入数据，然后按下<Return>即可。</p>

<p>这一段（下一页底部）是最后三个控件的定义。三个都是标签。为之前我们定义的变量设置textvariable属性。如果你还记得，当那个变量改变时，标签的文本也会同时改变。我们对lblData标签也做一点不同的东西。使用另一种字体来显示出队的数据从而突出它们。请记住，必须返回窗框对象，这样才能在PlaceWidget函数中使用它。</p>

<p>这是PlaceWidgets函数开始部分（下一页中间）。注意，我们在根窗口（root window）的最顶部放置了5个空标签。我这样做是为了设置间隔。这个简单的“伎俩（cheat）”会使得窗口布局更加容易。接着设置第一个窗框，然后是另一个“cheater”标签，最后是三个按钮。</p>

<p>下面我们放置第二个窗框，另一个“cheater”标签还有剩下的控件。</p>

<pre><code>def Quit(self):
    sys.exit()
</code></pre>

<p>下来是我们“standard”退出函数，它只是简单地调用了<code>sys.exit()</code></p>

<p>现在看看主按钮btnMain的回调函数。记住，我们将在按下按钮时将数据传给回调函数（通过p1参数）。用self.QueueType变量表示一个正在处理的队列类型，接着我们把self.obj分配给合适的队列，并最终通过改变根窗口的标题来显示正在使用的队列类型。在这之后，再把队列类型打印到终端窗口（当然你并不一定需要这样做），同时调用ShowStatus函数。接下来（下一页，右上方），我们要用ShowStatus函数了。</p>

<p>正如你所见，非常得简单。我们把标签变量设置成合适的状态，以使它们可以显示正在使用的队列是否为满、为空还是介于两者之间。</p>

<p>AddToQueue函数（下一页底部的右边）也相当直观。我们利用.get()函数从文本输入框里获得数据。接着检查当前队列类型是否是priority队列。如果是，就需要确保它的格式正确。检查它是否包含一个逗号（译者注：priority队列格式为（优先级，数据））。如果没有，就通过一条错误信息反映给用户。如果每件事都看似正确，那么我们就该检查正在使用的队列是否满了。请切记，如果队列满了，入队函数会被阻塞，程序将挂起。如果万事俱备了，就可以向队列里添加数据项并更新状态了。</p>

<p>GetFromQueue函数（见中偏右）甚至更简单。检查队列是否为空以防止遇到阻塞问题。如果不为空，就从队列里弹出并显示数据，然后更新状态即可。</p>

<p>下面就是我们程序的最后部分了。这是中心窗口函数（左上方）。首先获得屏幕的长和宽。接着我们用tkinter库内建的winfo_reqwidth()和winfo_reqheight()函数来获得根窗口的长和宽。在适当的时刻被调用时，这些函数将根据控件布局返回根窗口的长和宽。如果你太早调用它，你将得到错误的数据。接着我们用屏幕宽度减去请求窗口的宽度，并除以2，同时对高度做同样处理。然后用这些信息来设置geometry调用。大部分情况下，它都运行很棒。但是，有时候你需要手动设置所需的宽度和高度。</p>

<p>最后，实例化根窗口，设置基本标题，实例化QueueTest类。接着调用root.after，当根窗口实例化后它会等待x毫秒（这里是3毫秒），然后才调用Center函数。这样，根窗口就被完全建立并做好了运行准备，因此我们就能获得根窗口的高和宽了。你可能得调节一下延迟时间。有些机器比其他的快很多。3毫秒在我的机器上运行得很好，你的情况可能会不同。最后，通过调用根窗口的主循环来使程序运行。</p>

<p>当你操作队列时，请注意如果你把一些数据放入一个队列（比方说FIFO队列），接着切换到另一个队列（比方说LIFO队列），放在FIFO队列里的数据还在那儿等着你。你可以完全或部分地填充这三个队列，下来就开始折腾它们吧。</p>

<hr />

<p>好吧，上述的就是这期内容了。祝你和队列玩得愉快。QueueTest的代码可以到这儿找到：<a href="http://pastebin.com/5BBUiDce">http://pastebin.com/5BBUiDce</a></p>
]]></content>
  </entry>
  
</feed>
